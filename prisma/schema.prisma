// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Supplier {
  id      String   @id @default(uuid())
  name    String
  email   String
  phone   String
  address String
  products Product[]
}

model Category {
  id      String   @id @default(uuid())
  name    String
  urlKey  String   @unique
  products Product[]
}

model Product {
  id          String         @id @default(uuid())
  title       String
  urlKey      String         @unique
  description String?
  price       Decimal
  stock       Int
  categoryId  String
  category    Category       @relation(fields: [categoryId], references: [id])
  supplierId  String
  supplier    Supplier       @relation(fields: [supplierId], references: [id])
  images      ProductImage[]
  reviews     Review[]
  orderItems  OrderItem[]
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  alt       String?
  productId String
  product   Product  @relation(fields: [productId], references: [id])
}

model User {
  id               String         @id @default(uuid())
  email            String         @unique
  passwordHash     String
  name             String?
  role             Role           @default(USER)
  isEmailVerified  Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  refreshTokens    RefreshToken[]
  orders           Order[]
  reviews          Review[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  tokenHash String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id        String       @id @default(uuid())
  userId    String
  total     Decimal
  status    OrderStatus  @default(PENDING)
  createdAt DateTime     @default(now())
  user      User         @relation(fields: [userId], references: [id])
  items     OrderItem[]
  delivery  Delivery?
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Delivery {
  id                String        @id @default(uuid())
  orderId           String        @unique
  status            DeliveryStatus
  trackingNumber    String?
  carrier           String?
  estimatedDelivery DateTime?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  order             Order         @relation(fields: [orderId], references: [id])
}

enum Role {
  USER
  MANAGER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELED
}

enum DeliveryStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}
